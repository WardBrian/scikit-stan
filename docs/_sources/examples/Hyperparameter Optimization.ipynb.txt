{
    "cells": [
        {
            "cell_type": "code",
            "execution_count": 2,
            "metadata": {},
            "outputs": [
                {
                    "name": "stderr",
                    "output_type": "stream",
                    "text": [
                        "c:\\Users\\alizm\\anaconda3\\envs\\cmdstan\\lib\\site-packages\\tqdm\\auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
                        "  from .autonotebook import tqdm as notebook_tqdm\n"
                    ]
                }
            ],
            "source": [
                "from scikit_stan import GLM\n",
                "\n",
                "import numpy as np\n",
                "import pandas as pd  # type: ignore\n",
                "\n",
                "import matplotlib as mpl\n",
                "import matplotlib.pyplot as plt\n",
                "\n",
                "from scipy.special import expit\n",
                "\n",
                "from sklearn.model_selection import GridSearchCV\n",
                "\n",
                "from pathlib import Path"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 28,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": [
                            "\n",
                            "<style>\n",
                            ".jp-RenderedImage, .output_png{\n",
                            "    display: table-cell;\n",
                            "    text-align: center;\n",
                            "    vertical-align: middle;\n",
                            "}\n",
                            "</style>\n"
                        ],
                        "text/plain": [
                            "<IPython.core.display.HTML object>"
                        ]
                    },
                    "execution_count": 28,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "mpl.rc('axes.spines', top=True, bottom=True, left=True, right=True)\n",
                "#mpl.rc('axes', facecolor='white')\n",
                "mpl.rc(\"xtick\", bottom=True, labelbottom=True)\n",
                "mpl.rc(\"ytick\", left=True, labelleft=True)\n",
                "mpl.style.use('ggplot')\n",
                "\n",
                "\n",
                "# center images\n",
                "from IPython.core.display import HTML\n",
                "HTML(\"\"\"\n",
                "<style>\n",
                ".jp-RenderedImage, .output_png{\n",
                "    display: table-cell;\n",
                "    text-align: center;\n",
                "    vertical-align: middle;\n",
                "}\n",
                "</style>\n",
                "\"\"\")\n"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "This package integrates with sklearn optimization algorithms to optimize hyperparameters. In particular, the space of distributions and distribution parameters, which serve as the hyperparameters of the Bayesian model, can be optimized across with grid search. What's more, this optimization can be perfomed at a higher meta level by working with hyperpriors and tuning hyperhyperparameters. We give an example of using sk-learn's GridSearchCV to perform hyperparameter optimization and demonstrate how the package integrates with the rest of the sk-learn ecosystem."
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Keeping the priors on the regression coefficients at the default autoscaled normal, we perform a grid search over \n",
                "1. The error scale of the intercept's prior distribution, represented by $\\sigma_\\alpha$,     \n",
                "2. The error scale for the family of $y$, represented by $\\sigma_y$.\n",
                "\n",
                "\n",
                "\n",
                "NOTE: In principle, this problem could be a two level hyperparameter optimization problem: an optimization over the hyperparameter $\\sigma_\\alpha$ and then an optimization over the distribution parameter for $\\sigma_\\alpha$. Keep it simple for now...  "
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 3,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Import radon data\n",
                "# based on: https://mc-stan.org/users/documentation/case-studies/radon.html\n",
                "srrs2 = pd.read_csv(Path.cwd() / \"data\" / \"srrs2.dat\")\n",
                "srrs2.columns = srrs2.columns.map(str.strip)\n",
                "srrs_mn = srrs2.assign(fips=srrs2.stfips*1000 + srrs2.cntyfips)[srrs2.state=='MN']"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 4,
            "metadata": {},
            "outputs": [],
            "source": [
                "cty = pd.read_csv(Path.cwd() / \"data\" / \"cty.dat\")\n",
                "cty_mn = cty[cty.st=='MN'].copy()\n",
                "cty_mn[ 'fips'] = 1000*cty_mn.stfips + cty_mn.ctfips"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 4,
            "metadata": {},
            "outputs": [],
            "source": [
                "srrs_mn = srrs_mn.merge(cty_mn[['fips', 'Uppm']], on='fips')\n",
                "srrs_mn = srrs_mn.drop_duplicates(subset='idnum')\n",
                "u = np.log(srrs_mn.Uppm)\n",
                "\n",
                "n = len(srrs_mn)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 5,
            "metadata": {},
            "outputs": [],
            "source": [
                "srrs_mn.county = srrs_mn.county.str.strip()\n",
                "mn_counties = srrs_mn.county.unique()\n",
                "counties = len(mn_counties)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 6,
            "metadata": {},
            "outputs": [],
            "source": [
                "county_lookup = dict(zip(mn_counties, range(len(mn_counties))))\n",
                "county = srrs_mn['county_code'] = srrs_mn.county.replace(county_lookup).values\n",
                "radon = srrs_mn.activity\n",
                "srrs_mn['log_radon'] = log_radon = np.log(radon + 0.1).values\n",
                "floor_measure = srrs_mn.floor.values"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 7,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": [
                            "<AxesSubplot:>"
                        ]
                    },
                    "execution_count": 7,
                    "metadata": {},
                    "output_type": "execute_result"
                },
                {
                    "data": {
                        "image/png": "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",
                        "text/plain": [
                            "<Figure size 432x288 with 1 Axes>"
                        ]
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                }
            ],
            "source": [
                "srrs_mn.activity.apply(lambda x: np.log(x+0.1)).hist(bins=25)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 8,
            "metadata": {},
            "outputs": [
                {
                    "name": "stderr",
                    "output_type": "stream",
                    "text": [
                        "c:\\users\\alizm\\documents\\flatironinstitute\\sk-stan-regression\\sk_stan_regression\\utils\\validation.py:226: UserWarning: Passed data is one-dimensional, while estimator expects it to be at at least two-dimensional.\n",
                        "  warnings.warn(\n",
                        "c:\\users\\alizm\\documents\\flatironinstitute\\sk-stan-regression\\sk_stan_regression\\generalized_linear_regression\\glm.py:411: UserWarning: Prior on intercept not specified. Using default prior.\n",
                        "                alpha ~ normal(mu(y), 2.5 * sd(y)) if Gaussian family else normal(0, 2.5)\n",
                        "  warnings.warn(\n",
                        "c:\\users\\alizm\\documents\\flatironinstitute\\sk-stan-regression\\sk_stan_regression\\generalized_linear_regression\\glm.py:445: UserWarning: Prior on auxiliary parameter not specified. Using default unscaled prior\n",
                        "                        sigma ~ exponential(1)\n",
                        "                    \n",
                        "  warnings.warn(\n",
                        "14:55:13 - cmdstanpy - INFO - CmdStan start processing\n",
                        "chain 1 |\u001b[33m          \u001b[0m| 00:00 Status\n",
                        "\u001b[A\n",
                        "\n",
                        "\u001b[A\u001b[A\n",
                        "chain 1 |\u001b[33m█▊        \u001b[0m| 00:00 Iteration:  200 / 2000 [ 10%]  (Warmup)\n",
                        "\n",
                        "\u001b[A\u001b[A\n",
                        "\u001b[A\n",
                        "\n",
                        "chain 1 |\u001b[33m█████     \u001b[0m| 00:00 Iteration:  900 / 2000 [ 45%]  (Warmup)\n",
                        "\u001b[A\n",
                        "\n",
                        "chain 1 |\u001b[34m███████▎  \u001b[0m| 00:01 Iteration: 1300 / 2000 [ 65%]  (Sampling)\n",
                        "\u001b[A\n",
                        "\n",
                        "chain 1 |\u001b[34m████████▋ \u001b[0m| 00:02 Iteration: 1600 / 2000 [ 80%]  (Sampling)\n",
                        "\u001b[A\n",
                        "\n",
                        "chain 1 |\u001b[34m█████████▌\u001b[0m| 00:03 Iteration: 1800 / 2000 [ 90%]  (Sampling)\n",
                        "\u001b[A\n",
                        "\n",
                        "chain 1 |\u001b[34m██████████\u001b[0m| 00:03 Sampling completed                       \n",
                        "chain 2 |\u001b[34m██████████\u001b[0m| 00:03 Sampling completed                       \n",
                        "chain 3 |\u001b[34m██████████\u001b[0m| 00:03 Sampling completed                       \n",
                        "chain 4 |\u001b[34m██████████\u001b[0m| 00:03 Sampling completed                       "
                    ]
                },
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "                                                                                                                                                                                                                                                                                                                                "
                    ]
                },
                {
                    "name": "stderr",
                    "output_type": "stream",
                    "text": [
                        "\n",
                        "14:55:17 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "14:55:17 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n"
                    ]
                },
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "\n"
                    ]
                },
                {
                    "data": {
                        "text/plain": [
                            "[<matplotlib.lines.Line2D at 0x23a2fa0bac0>]"
                        ]
                    },
                    "execution_count": 8,
                    "metadata": {},
                    "output_type": "execute_result"
                },
                {
                    "data": {
                        "image/png": "",
                        "text/plain": [
                            "<Figure size 432x288 with 1 Axes>"
                        ]
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                }
            ],
            "source": [
                "glm = GLM(family=\"gaussian\", link=\"identity\")\n",
                "\n",
                "fitted = glm.fit(floor_measure, log_radon)\n",
                "xvals = np.linspace(-0.2, 1.2)\n",
                "plt.scatter(srrs_mn.floor, np.log(srrs_mn.activity+0.1))\n",
                "\n",
                "plt.plot(xvals, fitted.alpha_ + fitted.beta_*xvals, 'r--') \n"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "##### Varying Slope Model "
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 9,
            "metadata": {},
            "outputs": [
                {
                    "name": "stderr",
                    "output_type": "stream",
                    "text": [
                        "14:55:26 - cmdstanpy - INFO - CmdStan start processing\n",
                        "14:55:29 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "14:55:32 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "14:55:32 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "14:55:32 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "14:55:32 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "14:55:39 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "14:55:39 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "14:55:39 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "14:55:39 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "14:55:40 - cmdstanpy - INFO - CmdStan start processing\n",
                        "14:55:43 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "14:55:43 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "\tException: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "14:55:45 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "14:55:45 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "14:55:45 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "14:55:45 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "14:55:52 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "14:55:53 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "14:55:53 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "14:55:53 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "14:55:53 - cmdstanpy - INFO - CmdStan start processing\n",
                        "14:55:56 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "14:55:56 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "14:55:58 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "14:55:58 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "14:55:58 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "14:55:58 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "14:56:06 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "14:56:06 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "14:56:06 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "14:56:06 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "14:56:07 - cmdstanpy - INFO - CmdStan start processing\n",
                        "14:56:09 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "14:56:12 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "14:56:12 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "14:56:12 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "14:56:12 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "14:56:19 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "14:56:19 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "14:56:19 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "14:56:19 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "14:56:20 - cmdstanpy - INFO - CmdStan start processing\n",
                        "14:56:23 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "14:56:23 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "14:56:25 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "14:56:25 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "14:56:25 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "14:56:25 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "14:56:32 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "14:56:32 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "14:56:32 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "14:56:32 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "14:56:33 - cmdstanpy - INFO - CmdStan start processing\n",
                        "14:56:36 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "14:56:36 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "\tException: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "14:56:38 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "14:56:38 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "14:56:38 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "14:56:38 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "14:56:45 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "14:56:45 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "14:56:45 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "14:56:45 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "14:56:46 - cmdstanpy - INFO - CmdStan start processing\n",
                        "14:56:48 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "14:56:48 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "14:56:51 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "14:56:51 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "14:56:51 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "14:56:51 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "14:56:58 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "14:56:58 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "14:56:58 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "14:56:59 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "14:56:59 - cmdstanpy - INFO - CmdStan start processing\n",
                        "14:57:02 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "14:57:02 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "\tException: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "14:57:04 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "14:57:04 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "14:57:04 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "14:57:04 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "14:57:11 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "14:57:11 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "14:57:12 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "14:57:12 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "14:57:12 - cmdstanpy - INFO - CmdStan start processing\n",
                        "14:57:15 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "14:57:15 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "\tException: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "14:57:17 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "14:57:17 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "14:57:17 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "14:57:17 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "14:57:24 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "14:57:24 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "14:57:24 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "14:57:24 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "14:57:25 - cmdstanpy - INFO - CmdStan start processing\n",
                        "14:57:28 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "14:57:28 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "14:57:30 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "14:57:30 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "14:57:30 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "14:57:30 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "14:57:38 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "14:57:38 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "14:57:38 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "14:57:38 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "14:57:38 - cmdstanpy - INFO - CmdStan start processing\n",
                        "14:57:41 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "14:57:41 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "14:57:43 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "14:57:43 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "14:57:43 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "14:57:43 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "14:57:51 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "14:57:51 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "14:57:51 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "14:57:51 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "14:57:52 - cmdstanpy - INFO - CmdStan start processing\n",
                        "14:57:54 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "14:57:54 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "14:57:57 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "14:57:57 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "14:57:57 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "14:57:57 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "14:58:05 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "14:58:05 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "14:58:05 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "14:58:05 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "14:58:05 - cmdstanpy - INFO - CmdStan start processing\n",
                        "14:58:09 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "14:58:09 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "\tException: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "\tException: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "14:58:11 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "14:58:11 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "14:58:11 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "14:58:11 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "14:58:20 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "14:58:20 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "14:58:20 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "14:58:20 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "14:58:21 - cmdstanpy - INFO - CmdStan start processing\n",
                        "14:58:24 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "14:58:27 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "14:58:27 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "14:58:27 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "14:58:27 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "14:58:38 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "14:58:38 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "14:58:38 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "14:58:39 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "14:58:39 - cmdstanpy - INFO - CmdStan start processing\n",
                        "14:58:42 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "14:58:42 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "\tException: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "14:58:44 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "14:58:44 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "14:58:44 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "14:58:44 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "14:58:52 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "14:58:52 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "14:58:52 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "14:58:52 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "14:58:53 - cmdstanpy - INFO - CmdStan start processing\n",
                        "14:58:55 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "14:58:55 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "\tException: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "14:58:58 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "14:58:58 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "14:58:58 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "14:58:58 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "14:59:06 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "14:59:06 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "14:59:06 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "14:59:06 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "14:59:06 - cmdstanpy - INFO - CmdStan start processing\n",
                        "14:59:09 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "14:59:09 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "14:59:11 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "14:59:11 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "14:59:11 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "14:59:11 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "14:59:18 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "14:59:19 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "14:59:19 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "14:59:19 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "14:59:19 - cmdstanpy - INFO - CmdStan start processing\n",
                        "14:59:22 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "14:59:24 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "14:59:24 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "14:59:24 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "14:59:24 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "14:59:31 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "14:59:31 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "14:59:31 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "14:59:31 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "14:59:32 - cmdstanpy - INFO - CmdStan start processing\n",
                        "14:59:34 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "14:59:37 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "14:59:37 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "14:59:37 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "14:59:37 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "14:59:44 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "14:59:44 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "14:59:44 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "14:59:44 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "14:59:45 - cmdstanpy - INFO - CmdStan start processing\n",
                        "14:59:47 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "14:59:50 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "14:59:50 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "14:59:50 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "14:59:50 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "14:59:57 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "14:59:57 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "14:59:57 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "14:59:57 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "14:59:57 - cmdstanpy - INFO - CmdStan start processing\n",
                        "15:00:00 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "15:00:00 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "15:00:03 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "15:00:03 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "15:00:03 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "15:00:03 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "15:00:10 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "15:00:10 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "15:00:10 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "15:00:10 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "15:00:11 - cmdstanpy - INFO - CmdStan start processing\n",
                        "15:00:13 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "15:00:13 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "\tException: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "15:00:16 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "15:00:16 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "15:00:16 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "15:00:16 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "15:00:23 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "15:00:23 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "15:00:23 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "15:00:24 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "15:00:24 - cmdstanpy - INFO - CmdStan start processing\n",
                        "15:00:27 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "15:00:27 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "15:00:29 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "15:00:29 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "15:00:29 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "15:00:29 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "15:00:37 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "15:00:37 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "15:00:37 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "15:00:37 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "15:00:37 - cmdstanpy - INFO - CmdStan start processing\n",
                        "15:00:40 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "15:00:40 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "15:00:42 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "15:00:42 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "15:00:42 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "15:00:42 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "15:00:50 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "15:00:50 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "15:00:50 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "15:00:50 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "15:00:50 - cmdstanpy - INFO - CmdStan start processing\n",
                        "15:00:53 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "15:00:53 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "15:00:55 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "15:00:55 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "15:00:55 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "15:00:55 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "15:01:03 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "15:01:03 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "15:01:03 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "15:01:03 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "15:01:04 - cmdstanpy - INFO - CmdStan start processing\n",
                        "15:01:07 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "15:01:07 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "\tException: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n"
                    ]
                }
            ],
            "source": [
                "%%capture\n",
                "# this actually is a hyperhyperparameter optimization problem\n",
                "# optimize over prior_aux_param, which is a hyperhyperparameter \n",
                "# as it is the hyperparameter for the prior for sigma, which is used \n",
                "# as a parameter in the family distribution   \n",
                "glm_opt = GLM(family=\"gaussian\", link=\"identity\")\n",
                "\n",
                "param_range = np.linspace(0.1, 1, 5)\n",
                "\n",
                "param_grid = {\n",
                "        \"prior_aux\" :\n",
                "            list({\n",
                "                \"prior_aux_dist\": \"exponential\", \n",
                "\n",
                "                \"prior_aux_param\": aux_val\n",
                "            }\n",
                "            for aux_val in param_range)\n",
                "}\n",
                "\n",
                "\n",
                "grid_search = GridSearchCV(glm, param_grid=param_grid);\n",
                "\n",
                "searched = grid_search.fit(floor_measure, log_radon);\n",
                "\n",
                "\n",
                "print(grid_search.cv_results_)\n",
                "\n",
                "#fitted = glm.fit(X=floor_measure, y=log_radon);\n",
                "\n",
                "#fitted.alpha_, fitted.beta_, fitted.sigma_"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 32,
            "metadata": {},
            "outputs": [
                {
                    "name": "stderr",
                    "output_type": "stream",
                    "text": [
                        "16:09:32 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:09:35 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:09:35 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "16:09:37 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:09:37 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:09:37 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:09:37 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:09:46 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:09:46 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:09:46 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:09:46 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:09:47 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:09:50 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:09:50 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "16:09:52 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:09:52 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:09:52 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:09:52 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:10:01 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:10:01 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:10:01 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:10:01 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:10:01 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:10:04 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:10:04 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "16:10:07 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:10:07 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:10:07 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:10:07 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:10:18 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:10:18 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:10:18 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:10:18 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:10:18 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:10:22 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:10:24 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:10:24 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:10:24 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:10:24 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:10:32 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:10:32 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:10:32 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:10:32 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:10:33 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:10:36 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:10:36 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "\tException: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "16:10:39 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:10:39 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:10:39 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:10:39 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:10:47 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:10:47 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:10:47 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:10:47 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:10:47 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:10:50 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:10:53 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:10:53 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:10:53 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:10:53 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:11:01 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:11:01 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:11:01 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:11:01 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:11:01 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:11:04 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:11:04 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "16:11:07 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:11:07 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:11:07 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:11:07 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:11:15 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:11:15 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:11:15 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:11:15 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:11:16 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:11:18 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:11:18 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "16:11:21 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:11:21 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:11:21 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:11:21 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:11:28 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:11:28 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:11:28 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:11:28 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:11:29 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:11:31 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:11:31 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "16:11:34 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:11:34 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:11:34 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:11:34 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:11:41 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:11:41 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:11:41 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:11:41 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:11:42 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:11:45 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:11:45 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "16:11:47 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:11:47 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:11:47 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:11:47 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:11:55 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:11:55 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:11:55 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:11:55 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:11:55 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:11:58 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:11:58 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "\tException: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "16:12:01 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:12:01 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:12:01 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:12:01 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:12:08 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:12:08 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:12:08 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:12:08 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:12:08 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:12:12 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:12:12 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "16:12:14 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:12:14 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:12:14 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:12:14 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:12:23 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:12:23 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:12:23 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:12:23 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:12:23 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:12:26 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:12:26 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "\tException: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "16:12:29 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:12:29 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:12:29 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:12:29 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:12:37 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:12:37 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:12:37 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:12:37 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:12:37 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:12:41 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:12:41 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "\tException: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "\tException: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "16:12:44 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:12:44 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:12:44 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:12:44 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:12:52 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:12:52 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:12:52 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:12:52 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:12:52 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:12:56 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:12:56 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "16:12:58 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:12:58 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:12:58 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:12:58 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:13:06 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:13:06 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:13:06 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:13:06 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:13:06 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:13:09 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:13:09 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "16:13:12 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:13:12 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:13:12 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:13:12 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:13:19 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:13:19 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:13:19 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:13:19 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:13:20 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:13:23 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:13:25 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:13:25 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:13:25 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:13:25 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:13:33 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:13:33 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:13:33 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:13:33 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:13:34 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:13:37 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:13:37 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "16:13:39 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:13:39 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:13:39 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:13:39 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:13:48 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:13:48 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:13:48 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:13:48 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:13:49 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:13:51 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:13:51 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "16:13:54 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:13:54 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:13:54 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:13:54 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:14:02 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:14:02 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:14:02 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:14:02 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:14:03 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:14:06 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:14:06 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "\tException: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "16:14:08 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:14:08 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:14:08 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:14:08 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:14:16 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:14:16 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:14:16 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:14:16 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:14:17 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:14:20 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:14:20 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "16:14:22 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:14:22 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:14:22 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:14:22 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:14:31 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:14:31 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:14:31 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:14:31 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:14:31 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:14:34 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:14:34 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "\tException: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "16:14:37 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:14:37 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:14:37 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:14:37 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:14:45 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:14:45 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:14:45 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:14:45 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:14:45 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:14:48 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:14:48 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "16:14:51 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:14:51 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:14:51 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:14:51 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:14:58 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:14:58 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:14:58 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:14:58 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:14:59 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:15:02 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:15:04 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:15:04 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:15:04 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:15:04 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:15:12 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:15:12 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:15:12 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:15:12 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:15:12 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:15:15 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:15:15 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n",
                        "16:15:18 - cmdstanpy - INFO - Chain [1] start processing\n",
                        "16:15:18 - cmdstanpy - INFO - Chain [2] start processing\n",
                        "16:15:18 - cmdstanpy - INFO - Chain [3] start processing\n",
                        "16:15:18 - cmdstanpy - INFO - Chain [4] start processing\n",
                        "16:15:25 - cmdstanpy - INFO - Chain [4] done processing\n",
                        "16:15:26 - cmdstanpy - INFO - Chain [2] done processing\n",
                        "16:15:26 - cmdstanpy - INFO - Chain [1] done processing\n",
                        "16:15:26 - cmdstanpy - INFO - Chain [3] done processing\n",
                        "16:15:26 - cmdstanpy - INFO - CmdStan start processing\n",
                        "16:15:30 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "16:15:30 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n"
                    ]
                }
            ],
            "source": [
                "%%capture\n",
                "# this actually is a hyperhyperparameter optimization problem\n",
                "# optimize over prior_aux_param, which is a hyperhyperparameter \n",
                "# as it is the hyperparameter for the prior for sigma, which is used \n",
                "# as a parameter in the family distribution   \n",
                "glm_opt2 = GLM(family=\"gaussian\", link=\"identity\")\n",
                "\n",
                "param_range = np.linspace(0.1, 0.5, 5)\n",
                "\n",
                "param_grid = {\n",
                "        \"prior_intercept\" :\n",
                "            list({\n",
                "                \"prior_intercept_dist\": \"normal\", \n",
                "\n",
                "                \"prior_intercept_mu\": 1.5,\n",
                "\n",
                "                \"prior_intercept_sigma\": sigma_alpha_val\n",
                "            }\n",
                "            for sigma_alpha_val in param_range)\n",
                "}\n",
                "\n",
                "\n",
                "grid_search2 = GridSearchCV(glm, param_grid=param_grid);\n",
                "\n",
                "searched = grid_search2.fit(floor_measure, log_radon);\n",
                "\n",
                "\n",
                "print(grid_search.cv_results_)\n",
                "\n",
                "#fitted = glm.fit(X=floor_measure, y=log_radon);\n",
                "\n",
                "#fitted.alpha_, fitted.beta_, fitted.sigma_"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 33,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": [
                            "{'mean_fit_time': array([5.63911018, 5.37399569, 5.77570066, 5.56180911, 5.52767596]),\n",
                            " 'std_fit_time': array([0.16018198, 0.21030081, 0.39853522, 0.17529649, 0.19464907]),\n",
                            " 'mean_score_time': array([9.43437424, 8.24959178, 8.43530154, 8.50664806, 8.31223288]),\n",
                            " 'std_score_time': array([1.1753259 , 0.3028564 , 0.42739206, 0.4264129 , 0.34747   ]),\n",
                            " 'param_prior_intercept': masked_array(data=[{'prior_intercept_dist': 'normal', 'prior_intercept_mu': 1.5, 'prior_intercept_sigma': 0.1},\n",
                            "                    {'prior_intercept_dist': 'normal', 'prior_intercept_mu': 1.5, 'prior_intercept_sigma': 0.2},\n",
                            "                    {'prior_intercept_dist': 'normal', 'prior_intercept_mu': 1.5, 'prior_intercept_sigma': 0.30000000000000004},\n",
                            "                    {'prior_intercept_dist': 'normal', 'prior_intercept_mu': 1.5, 'prior_intercept_sigma': 0.4},\n",
                            "                    {'prior_intercept_dist': 'normal', 'prior_intercept_mu': 1.5, 'prior_intercept_sigma': 0.5}],\n",
                            "              mask=[False, False, False, False, False],\n",
                            "        fill_value='?',\n",
                            "             dtype=object),\n",
                            " 'params': [{'prior_intercept': {'prior_intercept_dist': 'normal',\n",
                            "    'prior_intercept_mu': 1.5,\n",
                            "    'prior_intercept_sigma': 0.1}},\n",
                            "  {'prior_intercept': {'prior_intercept_dist': 'normal',\n",
                            "    'prior_intercept_mu': 1.5,\n",
                            "    'prior_intercept_sigma': 0.2}},\n",
                            "  {'prior_intercept': {'prior_intercept_dist': 'normal',\n",
                            "    'prior_intercept_mu': 1.5,\n",
                            "    'prior_intercept_sigma': 0.30000000000000004}},\n",
                            "  {'prior_intercept': {'prior_intercept_dist': 'normal',\n",
                            "    'prior_intercept_mu': 1.5,\n",
                            "    'prior_intercept_sigma': 0.4}},\n",
                            "  {'prior_intercept': {'prior_intercept_dist': 'normal',\n",
                            "    'prior_intercept_mu': 1.5,\n",
                            "    'prior_intercept_sigma': 0.5}}],\n",
                            " 'split0_test_score': array([0.91806388, 0.92037036, 0.92192078, 0.92145701, 0.9225362 ]),\n",
                            " 'split1_test_score': array([0.92760653, 0.93139257, 0.92784184, 0.92879845, 0.92649572]),\n",
                            " 'split2_test_score': array([0.92400341, 0.9251356 , 0.92539458, 0.92344662, 0.92393732]),\n",
                            " 'split3_test_score': array([0.86246216, 0.86378672, 0.86572067, 0.86708639, 0.86581394]),\n",
                            " 'split4_test_score': array([0.93539041, 0.94038093, 0.93999361, 0.94065174, 0.94060138]),\n",
                            " 'mean_test_score': array([0.91350528, 0.91621324, 0.9161743 , 0.91628804, 0.91587691]),\n",
                            " 'std_test_score': array([0.02613119, 0.0270552 , 0.02595032, 0.02549065, 0.02584444]),\n",
                            " 'rank_test_score': array([5, 2, 3, 1, 4])}"
                        ]
                    },
                    "execution_count": 33,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "gs_rez2 = grid_search2.cv_results_\n",
                "gs_rez2\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 13,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": [
                            "{'mean_fit_time': array([5.30950308, 5.14737024, 5.56399112, 5.17774582, 5.22426496]),\n",
                            " 'std_fit_time': array([0.06107001, 0.02645618, 0.3098849 , 0.13146148, 0.09319016]),\n",
                            " 'mean_score_time': array([7.99337845, 7.90251842, 9.34669194, 7.75936437, 8.00935616]),\n",
                            " 'std_score_time': array([0.13692504, 0.11199365, 1.5159354 , 0.24906021, 0.08258889]),\n",
                            " 'param_prior_aux': masked_array(data=[{'prior_aux_dist': 'exponential', 'prior_aux_param': 0.1},\n",
                            "                    {'prior_aux_dist': 'exponential', 'prior_aux_param': 0.325},\n",
                            "                    {'prior_aux_dist': 'exponential', 'prior_aux_param': 0.55},\n",
                            "                    {'prior_aux_dist': 'exponential', 'prior_aux_param': 0.775},\n",
                            "                    {'prior_aux_dist': 'exponential', 'prior_aux_param': 1.0}],\n",
                            "              mask=[False, False, False, False, False],\n",
                            "        fill_value='?',\n",
                            "             dtype=object),\n",
                            " 'params': [{'prior_aux': {'prior_aux_dist': 'exponential',\n",
                            "    'prior_aux_param': 0.1}},\n",
                            "  {'prior_aux': {'prior_aux_dist': 'exponential', 'prior_aux_param': 0.325}},\n",
                            "  {'prior_aux': {'prior_aux_dist': 'exponential', 'prior_aux_param': 0.55}},\n",
                            "  {'prior_aux': {'prior_aux_dist': 'exponential', 'prior_aux_param': 0.775}},\n",
                            "  {'prior_aux': {'prior_aux_dist': 'exponential', 'prior_aux_param': 1.0}}],\n",
                            " 'split0_test_score': array([0.92143333, 0.92266843, 0.91996582, 0.92183316, 0.92122403]),\n",
                            " 'split1_test_score': array([0.92708067, 0.92636237, 0.92917565, 0.92988003, 0.92924314]),\n",
                            " 'split2_test_score': array([0.92364268, 0.92406732, 0.92516504, 0.92541146, 0.92575936]),\n",
                            " 'split3_test_score': array([0.86712565, 0.8654041 , 0.86609607, 0.86574883, 0.86919326]),\n",
                            " 'split4_test_score': array([0.93955606, 0.93915569, 0.94056164, 0.94017218, 0.94107701]),\n",
                            " 'mean_test_score': array([0.91576768, 0.91553158, 0.91619284, 0.91660913, 0.91729936]),\n",
                            " 'std_test_score': array([0.02511586, 0.02573699, 0.02594924, 0.02616439, 0.02493673]),\n",
                            " 'rank_test_score': array([4, 5, 3, 2, 1])}"
                        ]
                    },
                    "execution_count": 13,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "gs_rez = grid_search.cv_results_\n",
                "gs_rez\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 35,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": [
                            "Text(0.5, 1.0, 'Score with Gridsearch on Prior Intercept $\\\\sigma_\\\\alpha$ Parameter')"
                        ]
                    },
                    "execution_count": 35,
                    "metadata": {},
                    "output_type": "execute_result"
                },
                {
                    "data": {
                        "image/png": "",
                        "text/plain": [
                            "<Figure size 432x288 with 1 Axes>"
                        ]
                    },
                    "metadata": {},
                    "output_type": "display_data"
                }
            ],
            "source": [
                "mean_y = gs_rez2['mean_test_score']\n",
                "plt.plot(param_range, mean_y[::-1])\n",
                "plt.ylabel(\"Mean Test Score\")\n",
                "plt.xlabel(f\"Prior Intercept $\\sigma_\\\\alpha$ Parameter\")\n",
                "plt.title(f\"Score with Gridsearch on Prior Intercept $\\sigma_\\\\alpha$ Parameter\")"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 27,
            "metadata": {},
            "outputs": [
                {
                    "ename": "NameError",
                    "evalue": "name 'bc_data_X' is not defined",
                    "output_type": "error",
                    "traceback": [
                        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
                        "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
                        "\u001b[1;32mc:\\Users\\alizm\\Documents\\FlatironInstitute\\sk-stan-regression\\docsrc\\examples\\Hyperparameter Optimization.ipynb Cell 12\u001b[0m in \u001b[0;36m<cell line: 7>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      <a href='vscode-notebook-cell:/c%3A/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/docsrc/examples/Hyperparameter%20Optimization.ipynb#ch0000024?line=2'>3</a>\u001b[0m glm_gamma2 \u001b[39m=\u001b[39m GLM(family\u001b[39m=\u001b[39m\u001b[39m\"\u001b[39m\u001b[39mgamma\u001b[39m\u001b[39m\"\u001b[39m, link\u001b[39m=\u001b[39m\u001b[39m\"\u001b[39m\u001b[39minverse\u001b[39m\u001b[39m\"\u001b[39m, seed\u001b[39m=\u001b[39m\u001b[39m1234\u001b[39m)\n\u001b[0;32m      <a href='vscode-notebook-cell:/c%3A/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/docsrc/examples/Hyperparameter%20Optimization.ipynb#ch0000024?line=4'>5</a>\u001b[0m \u001b[39m# Fit the model. Note that default priors are used without autoscaling, see the \u001b[39;00m\n\u001b[0;32m      <a href='vscode-notebook-cell:/c%3A/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/docsrc/examples/Hyperparameter%20Optimization.ipynb#ch0000024?line=5'>6</a>\u001b[0m \u001b[39m# API to see how to change these.\u001b[39;00m\n\u001b[1;32m----> <a href='vscode-notebook-cell:/c%3A/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/docsrc/examples/Hyperparameter%20Optimization.ipynb#ch0000024?line=6'>7</a>\u001b[0m glm_gamma1\u001b[39m.\u001b[39mfit(bc_data_X, bc_data_lot1, show_console\u001b[39m=\u001b[39m\u001b[39mFalse\u001b[39;00m)\n\u001b[0;32m      <a href='vscode-notebook-cell:/c%3A/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/docsrc/examples/Hyperparameter%20Optimization.ipynb#ch0000024?line=7'>8</a>\u001b[0m glm_gamma2\u001b[39m.\u001b[39mfit(bc_data_X, bc_data_lot2, show_console\u001b[39m=\u001b[39m\u001b[39mFalse\u001b[39;00m)\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/docsrc/examples/Hyperparameter%20Optimization.ipynb#ch0000024?line=9'>10</a>\u001b[0m \u001b[39mprint\u001b[39m(glm_gamma1\u001b[39m.\u001b[39malpha_, glm_gamma1\u001b[39m.\u001b[39mbeta_)\n",
                        "\u001b[1;31mNameError\u001b[0m: name 'bc_data_X' is not defined"
                    ]
                }
            ],
            "source": [
                "# Initialize two different GLM objects, one for each lot. \n",
                "glm_gamma1 = GLM(family=\"gamma\", link=\"inverse\", seed=1234)\n",
                "glm_gamma2 = GLM(family=\"gamma\", link=\"inverse\", seed=1234)\n",
                "\n",
                "# Fit the model. Note that default priors are used without autoscaling, see the \n",
                "# API to see how to change these.\n",
                "glm_gamma1.fit(bc_data_X, bc_data_lot1, show_console=False)\n",
                "glm_gamma2.fit(bc_data_X, bc_data_lot2, show_console=False)\n",
                "\n",
                "print(glm_gamma1.alpha_, glm_gamma1.beta_)\n",
                "print(glm_gamma2.alpha_, glm_gamma2.beta_)\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 24,
            "metadata": {},
            "outputs": [
                {
                    "name": "stderr",
                    "output_type": "stream",
                    "text": [
                        "c:\\users\\alizm\\documents\\flatironinstitute\\sk-stan-regression\\sk_stan_regression\\utils\\validation.py:226: UserWarning: Passed data is one-dimensional, while estimator expects it to be at at least two-dimensional.\n",
                        "  warnings.warn(\n",
                        "c:\\users\\alizm\\documents\\flatironinstitute\\sk-stan-regression\\sk_stan_regression\\generalized_linear_regression\\glm.py:411: UserWarning: Prior on intercept not specified. Using default prior.\n",
                        "                alpha ~ normal(mu(y), 2.5 * sd(y)) if Gaussian family else normal(0, 2.5)\n",
                        "  warnings.warn(\n",
                        "c:\\users\\alizm\\documents\\flatironinstitute\\sk-stan-regression\\sk_stan_regression\\generalized_linear_regression\\glm.py:445: UserWarning: Prior on auxiliary parameter not specified. Using default unscaled prior\n",
                        "                        sigma ~ exponential(1)\n",
                        "                    \n",
                        "  warnings.warn(\n",
                        "18:45:29 - cmdstanpy - INFO - CmdStan start processing\n",
                        "chain 1 |\u001b[33m          \u001b[0m| 00:00 Status\n",
                        "\u001b[A\n",
                        "\n",
                        "\u001b[A\u001b[A\n",
                        "\u001b[A\n",
                        "\n",
                        "chain 1 |\u001b[33m█▎        \u001b[0m| 00:00 Iteration:  100 / 2000 [  5%]  (Warmup)\n",
                        "\n",
                        "\u001b[A\u001b[A\n",
                        "chain 1 |\u001b[33m████      \u001b[0m| 00:00 Iteration:  700 / 2000 [ 35%]  (Warmup)\n",
                        "\n",
                        "\u001b[A\u001b[A\n",
                        "chain 1 |\u001b[34m██████▎   \u001b[0m| 00:00 Iteration: 1100 / 2000 [ 55%]  (Sampling)\n",
                        "\u001b[A\n",
                        "\n",
                        "chain 1 |\u001b[34m███████▋  \u001b[0m| 00:01 Iteration: 1400 / 2000 [ 70%]  (Sampling)\n",
                        "\u001b[A\n",
                        "\n",
                        "chain 1 |\u001b[34m████████▋ \u001b[0m| 00:02 Iteration: 1600 / 2000 [ 80%]  (Sampling)\n",
                        "\u001b[A\n",
                        "\n",
                        "chain 1 |\u001b[34m█████████▌\u001b[0m| 00:03 Iteration: 1800 / 2000 [ 90%]  (Sampling)\n",
                        "\u001b[A\n",
                        "\n",
                        "\u001b[A\u001b[A\n",
                        "chain 1 |\u001b[34m██████████\u001b[0m| 00:03 Iteration: 1900 / 2000 [ 95%]  (Sampling)\n",
                        "\n",
                        "chain 1 |\u001b[34m██████████\u001b[0m| 00:03 Sampling completed                       \n",
                        "chain 2 |\u001b[34m██████████\u001b[0m| 00:03 Sampling completed                       \n",
                        "chain 3 |\u001b[34m██████████\u001b[0m| 00:03 Sampling completed                       \n",
                        "chain 4 |\u001b[34m██████████\u001b[0m| 00:03 Sampling completed                       "
                    ]
                },
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "                                                                                                                                                                                                                                                                                                                                "
                    ]
                },
                {
                    "name": "stderr",
                    "output_type": "stream",
                    "text": [
                        "\n",
                        "18:45:33 - cmdstanpy - INFO - CmdStan done processing.\n",
                        "18:45:33 - cmdstanpy - WARNING - Non-fatal error during sampling:\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "\tException: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in 'C:/Users/alizm/Documents/FlatironInstitute/sk-stan-regression/sk_stan_regression/stan_files/glm_v_continuous.stan', line 74, column 4 to column 35)\n",
                        "Consider re-running with show_console=True if the above output is unclear!\n"
                    ]
                },
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "\n"
                    ]
                },
                {
                    "data": {
                        "text/plain": [
                            "<sk_stan_regression.generalized_linear_regression.glm.GLM at 0x19e53b49690>"
                        ]
                    },
                    "execution_count": 24,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "glm.fit(floor_measure, log_radon)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 25,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": [
                            "(1.3634094832324999, array([-0.58611448]), 0.7908575316030001)"
                        ]
                    },
                    "execution_count": 25,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "glm.alpha_, glm.beta_, glm.sigma_"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 8,
            "metadata": {},
            "outputs": [],
            "source": [
                "import arviz as az\n",
                "az.style.use(\"arviz-darkgrid\")"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 11,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": [
                            "array([[<AxesSubplot:title={'center':'alpha'}>,\n",
                            "        <AxesSubplot:title={'center':'alpha'}>],\n",
                            "       [<AxesSubplot:title={'center':'sigma'}>,\n",
                            "        <AxesSubplot:title={'center':'sigma'}>]], dtype=object)"
                        ]
                    },
                    "execution_count": 11,
                    "metadata": {},
                    "output_type": "execute_result"
                },
                {
                    "data": {
                        "image/png": "",
                        "text/plain": [
                            "<Figure size 864x288 with 4 Axes>"
                        ]
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                }
            ],
            "source": [
                "t =az.from_cmdstanpy(fitted.fitted_samples_)\n",
                "az.plot_trace(t, var_names=[\"alpha\", \"sigma\"])"
            ]
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3.7.12 ('intern')",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.7.12"
        },
        "orig_nbformat": 4,
        "vscode": {
            "interpreter": {
                "hash": "ac9bdc2973754fe4cc8521296175e09cae6b6b40a4770c7a08198029c30428f7"
            }
        }
    },
    "nbformat": 4,
    "nbformat_minor": 2
}
